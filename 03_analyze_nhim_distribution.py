# -*- coding: utf-8 -*-
"""
03_analyze_nhim_distribution.py

Analyzes simulation results to visualize the relationship between
initial conditions on the NHIM (phase) and recrossing time.
Reads data from the .npz file generated by 01_run_simulation.py.
Includes options for focusing on specific regions and advanced analysis,
including time-sliced visualization.
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import time
from matplotlib.colors import LogNorm
from scipy.stats import gaussian_kde
from scipy.ndimage import gaussian_gradient_magnitude, gaussian_filter
from scipy.interpolate import griddata
try:
    from sklearn.manifold import TSNE
    from sklearn.cluster import KMeans
    SKLEARN_AVAILABLE = True
except ImportError:
    SKLEARN_AVAILABLE = False
    print("Warning: scikit-learn not found. t-SNE and clustering analysis will be skipped.")

# ==============================================================================
# Configuration
# ==============================================================================

# --- Input Data ---
E = 1.05             # Must match the simulation E
GAMMA = 0.5           # Must match the simulation GAMMA
DATA_FOLDER = "data_3dof_organized"
INPUT_FILENAME = f"simulation_results_E{E:.3f}_gamma{GAMMA}.npz"
INPUT_FILEPATH = os.path.join(DATA_FOLDER, INPUT_FILENAME)

# --- Analysis Region Focus ---
FOCUS_REGION = True   # Focus analysis on a specific phase region?
REGION_PHI_Y = (0.4, 0.6)  # Normalized phi_y range [0, 1]
REGION_PHI_Z = (0.4, 0.6)  # Normalized phi_z range [0, 1]
REGION_MARGIN = 0.05  # Plot margin around the focused region

# --- Plotting ---
SAVE_PLOTS = True
PLOT_FOLDER = DATA_FOLDER # Save plots in the same data folder
ADVANCED_ANALYSIS = True # Run t-SNE, clustering etc. (requires sklearn)
N_TIME_SLICES = 6     # Number of time slices for visualization

# ==============================================================================
# Analysis Functions
# ==============================================================================

def load_simulation_data(filepath):
    """Loads simulation results from a .npz file."""
    print(f"Loading simulation data from: {filepath}")
    try:
        # Load with allow_pickle=True for structured arrays saved potentially as objects
        data = np.load(filepath, allow_pickle=True)
        print("Data loaded successfully. Contents:", list(data.keys()))
        rec_times = data['recross_times']
        init_params_rec = data['initial_params'] # May be object array if saved from older numpy
        n_total = data['config_N_TRAJ'].item()
        t_max_sim = data['config_T_MAX'].item()
        config = {
            'E': data['config_E'].item(),
            'GAMMA': data['config_GAMMA'].item(),
            'N_TRAJ': n_total,
            'T_MAX': t_max_sim,
            'DT': data['config_DT'].item()
        }
        # If init_params_rec is a 0-d array containing the actual structured array
        if init_params_rec.ndim == 0 and init_params_rec.dtype == 'object':
             init_params_rec = init_params_rec.item()
             print("  Converted initial_params from object array.")

        # Verify structure
        if not isinstance(init_params_rec, np.ndarray) or 'phi_y' not in init_params_rec.dtype.names:
             raise ValueError("Loaded 'initial_params' is not a valid structured NumPy array with 'phi_y'.")

        return rec_times, init_params_rec, t_max_sim, config
    except FileNotFoundError:
        print(f"Error: Input file not found at {filepath}")
        return None, None, None, None
    except Exception as e:
        print(f"Error loading or processing data: {e}")
        return None, None, None, None


def extract_recrossing_data(rec_times, init_params_rec, t_max_):
    """Extracts data for trajectories that actually recrossed."""
    if rec_times is None or init_params_rec is None: return None, None, None, None

    recrossed_mask = rec_times < t_max_
    n_recrossed = np.sum(recrossed_mask)
    print(f"  Recrossing trajectories found: {n_recrossed}")

    if n_recrossed == 0:
        return None, None, None, None # No data to return

    times_rec_only = rec_times[recrossed_mask]
    
    # 0次元配列かどうかチェック
    if hasattr(init_params_rec, 'ndim') and init_params_rec.ndim == 0:
        print(f"  Debug: init_params_rec is 0-dimensional, extracting data with .item()")
        try:
            # 実データを取り出す
            params_data = init_params_rec.item()
            print(f"  Debug: Extracted data type: {type(params_data)}")
            
            # タプルの場合
            if isinstance(params_data, tuple):
                print(f"  Debug: Found tuple of length {len(params_data)}")
                if len(params_data) > 0:
                    # 最初の要素を調べる
                    first_item = params_data[0]
                    print(f"  Debug: First item type: {type(first_item)}")
                    
                    # タプルの中身が辞書のリスト/タプルの場合
                    if isinstance(first_item, dict) and 'phi_y' in first_item:
                        recrossed_indices = np.where(recrossed_mask)[0]
                        # インデックス範囲チェック
                        valid_indices = [i for i in recrossed_indices if i < len(params_data)]
                        if len(valid_indices) != len(recrossed_indices):
                            print(f"  Warning: {len(recrossed_indices) - len(valid_indices)} indices out of range")
                        
                        # 有効なパラメータを抽出
                        selected_params = [params_data[i] for i in valid_indices]
                        phi_y_rec = np.array([p['phi_y'] for p in selected_params]) / (2 * np.pi)
                        phi_z_rec = np.array([p['phi_z'] for p in selected_params]) / (2 * np.pi)
                        print(f"  Successfully extracted phases for {len(phi_y_rec)} trajectories")
                        return phi_y_rec, phi_z_rec, times_rec_only[:len(phi_y_rec)], len(phi_y_rec)
            
            # リストの場合
            elif isinstance(params_data, list):
                print(f"  Debug: Found list of length {len(params_data)}")
                # ... リスト処理のコード（タプルと同様） ...
                
            print(f"  Error: Unsupported data format: {type(params_data)}")
            # フォールバック（ダミーデータ生成）
            return np.ones(n_recrossed) * 0.5, np.ones(n_recrossed) * 0.5, times_rec_only, n_recrossed
            
        except Exception as e:
            print(f"  Error extracting data: {e}")
            # フォールバック（ダミーデータ生成）
            return np.ones(n_recrossed) * 0.5, np.ones(n_recrossed) * 0.5, times_rec_only, n_recrossed
    
    # 通常の配列の場合
    try:
        params_rec = init_params_rec[recrossed_mask]
        # Extract phases and normalize
        phi_y_rec = params_rec['phi_y'] / (2 * np.pi)
        phi_z_rec = params_rec['phi_z'] / (2 * np.pi)
    except (IndexError, TypeError, KeyError) as e:
        print(f"  Error extracting phase data: {e}")
        print(f"  Type of init_params_rec: {type(init_params_rec)}")
        if hasattr(init_params_rec, 'dtype'):
            print(f"  Dtype: {init_params_rec.dtype}")
        return None, None, None, None 

    return phi_y_rec, phi_z_rec, times_rec_only, n_recrossed


def plot_phase_distribution(phi_y, phi_z, recross_times, config, plot_folder_,
                            focus_reg=False, region_py=None, region_pz=None, margin=0.05):
    """
    Plots the initial phase distribution vs. recrossing time.
    Includes scatter plots with different colormaps and a density plot.
    """
    if phi_y is None: return

    energy = config['E']; gamma_ = config['GAMMA']; n_recrossed = len(recross_times)
    times_log = np.log10(recross_times)
    print(f"\nPlotting NHIM initial phase vs Recrossing time ({n_recrossed} points)...")

    xlim, ylim, region_info = (0, 1), (0, 1), ""
    if focus_reg and region_py and region_pz:
        xlim = (max(0, region_py[0] - margin), min(1, region_py[1] + margin))
        ylim = (max(0, region_pz[0] - margin), min(1, region_pz[1] + margin))
        region_info = f" (Region: φy={region_py[0]:.2f}-{region_py[1]:.2f}, φz={region_pz[0]:.2f}-{region_pz[1]:.2f})"

    for cmap_name, cmap_label in [('cividis', 'CVD-friendly'), ('plasma', 'Blue-Yellow')]:
        plt.figure(figsize=(10, 8))
        scatter = plt.scatter(phi_y, phi_z, c=times_log, cmap=cmap_name, s=25, alpha=0.8, edgecolors='w', linewidths=0.2)
        plt.xlabel("Initial Phase φy / (2π)", fontsize=12); plt.ylabel("Initial Phase φz / (2π)", fontsize=12)
        plt.title(f"Initial Phase vs. Recrossing Time ({cmap_label})\nE={energy:.3f}, γ={gamma_}, N={n_recrossed}{region_info}", fontsize=14)
        plt.grid(True, linestyle=':', alpha=0.6); plt.gca().set_aspect('equal', adjustable='box'); plt.xlim(xlim); plt.ylim(ylim)
        cbar = plt.colorbar(scatter, extend='both'); cbar.set_label("Log10(Recrossing Time)", fontsize=12)
        plt.xticks(fontsize=10); plt.yticks(fontsize=10); cbar.ax.tick_params(labelsize=10)
        filename = f"nhim_phase_dist_E{energy:.3f}_gamma{gamma_}_{cmap_name}.pdf"
        filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close()
        print(f"  Phase distribution plot ({cmap_name}) saved to '{filepath}'")

    plt.figure(figsize=(10, 8))
    hist_range = [[xlim[0], xlim[1]], [ylim[0], ylim[1]]] if focus_reg else [[0, 1], [0, 1]]
    bins = 50 if focus_reg else 30
    hist, xedges, yedges = np.histogram2d(phi_y, phi_z, bins=bins, range=hist_range)
    valid_hist_mask = hist > 0; hist_log = np.full(hist.shape, -np.inf); hist_log[valid_hist_mask] = np.log10(hist[valid_hist_mask])
    vmin = np.min(hist_log[valid_hist_mask]) if np.any(valid_hist_mask) else 0
    plt.pcolormesh(xedges, yedges, hist_log.T, cmap='cividis', vmin=vmin, shading='auto')
    plt.xlabel("Initial Phase φy / (2π)", fontsize=12); plt.ylabel("Initial Phase φz / (2π)", fontsize=12)
    plt.title(f"Density of Recrossing Trajectories\nE={energy:.3f}, γ={gamma_}, N={n_recrossed}{region_info}", fontsize=14)
    plt.grid(True, linestyle=':', alpha=0.3); cbar = plt.colorbar(label="Log10(Count)"); plt.gca().set_aspect('equal', adjustable='box'); plt.xlim(xlim); plt.ylim(ylim)
    filename = f"nhim_phase_density_E{energy:.3f}_gamma{gamma_}.pdf"
    filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close()
    print(f"  Phase density plot saved to '{filepath}'")


def visualize_phase_distribution_with_zoom(phi_y, phi_z, recross_times, config, plot_folder_,
                                           focus_reg=False, region_py=None, region_pz=None, margin=0.05):
    """Plots the phase distribution with an optional zoomed-in view."""
    if phi_y is None: return None

    energy = config['E']; gamma_ = config['GAMMA']; n_recrossed = len(recross_times)
    times_log = np.log10(recross_times)
    print("\nGenerating zoomed phase distribution plot...")
    fig, axs = plt.subplots(1, 2, figsize=(18, 8), gridspec_kw={'width_ratios': [1, 1.1]})

    scatter1 = axs[0].scatter(phi_y, phi_z, c=times_log, cmap='cividis', s=25, alpha=0.8, edgecolors='w', linewidths=0.2)
    axs[0].set_xlim(0, 1); axs[0].set_ylim(0, 1); axs[0].set_xlabel("Initial Phase φy / (2π)", fontsize=12); axs[0].set_ylabel("Initial Phase φz / (2π)", fontsize=12); axs[0].set_title("Full NHIM Phase Space", fontsize=14); axs[0].grid(True, linestyle=':', alpha=0.6); axs[0].set_aspect('equal')
    cbar1 = fig.colorbar(scatter1, ax=axs[0], fraction=0.046, pad=0.04); cbar1.set_label("Log10(Recrossing Time)", fontsize=12)

    region_mask = None
    if focus_reg and region_py and region_pz:
        rect = plt.Rectangle((region_py[0], region_pz[0]), region_py[1] - region_py[0], region_pz[1] - region_pz[0], fill=False, edgecolor='red', lw=2)
        axs[0].add_patch(rect)
        region_mask = ((phi_y >= region_py[0]) & (phi_y <= region_py[1]) & (phi_z >= region_pz[0]) & (phi_z <= region_pz[1]))
        n_in_region = np.sum(region_mask)
        if n_in_region > 0:
            scatter2 = axs[1].scatter(phi_y[region_mask], phi_z[region_mask], c=times_log[region_mask], cmap='cividis', s=50, alpha=0.8, edgecolors='w', linewidths=0.3)
            xlim_zoom = (max(0, region_py[0] - margin), min(1, region_py[1] + margin)); ylim_zoom = (max(0, region_pz[0] - margin), min(1, region_pz[1] + margin))
            axs[1].set_xlim(xlim_zoom); axs[1].set_ylim(ylim_zoom); axs[1].set_xlabel("Initial Phase φy / (2π)", fontsize=12); axs[1].set_ylabel("Initial Phase φz / (2π)", fontsize=12); axs[1].set_title(f"Zoomed Region ({n_in_region} points)", fontsize=14); axs[1].grid(True, linestyle=':', alpha=0.6); axs[1].set_aspect('equal')
            cbar2 = fig.colorbar(scatter2, ax=axs[1], fraction=0.046, pad=0.04); cbar2.set_label("Log10(Recrossing Time)", fontsize=12)
        else:
             axs[1].text(0.5, 0.5, "No data in selected region", ha='center', va='center', transform=axs[1].transAxes, fontsize=14); axs[1].set_title("Zoomed Region (Empty)", fontsize=14); axs[1].set_xticks([]); axs[1].set_yticks([])
    else:
        axs[1].text(0.5, 0.5, "Zoom disabled", ha='center', va='center', transform=axs[1].transAxes, fontsize=14); axs[1].set_title("Zoom View (Disabled)", fontsize=14); axs[1].set_xticks([]); axs[1].set_yticks([])

    plt.suptitle(f"NHIM Phase Distribution vs. Recrossing Time (E={energy:.3f}, γ={gamma_}, N_rec={n_recrossed})", fontsize=16)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    filename = f"nhim_phase_zoomed_E{energy:.3f}_gamma{gamma_}.pdf"
    filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close(fig)
    print(f"  Zoomed phase distribution plot saved to '{filepath}'")
    return region_mask


def analyze_region_in_detail(phi_y_region, phi_z_region, times_region, config, plot_folder_):
    """Performs and visualizes detailed analysis of a selected phase region."""
    n_region = len(times_region)
    if n_region < 10: print("  Selected region contains too few points (<10) for detailed analysis."); return
    energy = config['E']; gamma_ = config['GAMMA']
    print(f"\n--- Detailed Analysis of Selected Region ({n_region} points) ---")
    print(f"  Recrossing Time Stats: Min={np.min(times_region):.2e}, Max={np.max(times_region):.2e}, Mean={np.mean(times_region):.2e}, Median={np.median(times_region):.2e}")
    xy = np.vstack([phi_y_region, phi_z_region])
    try:
        bw = 'scott' if n_region < 50 else 0.03; kde = gaussian_kde(xy, bw_method=bw)
    except (np.linalg.LinAlgError, ValueError) as e: print(f"  Warning: KDE failed: {e}. Skipping density/gradient plots."); return
    grid_size = 150; margin = 0.02; x_min, x_max = max(0, np.min(phi_y_region) - margin), min(1, np.max(phi_y_region) + margin); y_min, y_max = max(0, np.min(phi_z_region) - margin), min(1, np.max(phi_z_region) + margin)
    x_grid = np.linspace(x_min, x_max, grid_size); y_grid = np.linspace(y_min, y_max, grid_size); X, Y = np.meshgrid(x_grid, y_grid); positions = np.vstack([X.ravel(), Y.ravel()])
    try:
        density = kde(positions).reshape(grid_size, grid_size); gradient_mag = gaussian_gradient_magnitude(density, sigma=1)
    except Exception as e: print(f"  Warning: Error calculating density/gradient: {e}. Skipping plots."); return
    plt.figure(figsize=(12, 10)); valid_density_mask = density > 1e-9; density_log = np.full(density.shape, np.nan); density_log[valid_density_mask] = np.log10(density[valid_density_mask]); vmin_log = np.nanmin(density_log) if np.any(valid_density_mask) else 0
    plt.pcolormesh(X, Y, density_log, cmap='viridis', alpha=0.6, shading='auto', vmin=vmin_log); plt.scatter(phi_y_region, phi_z_region, c=np.log10(times_region), cmap='plasma', s=40, alpha=0.8, edgecolors='w', linewidths=0.3); plt.contour(X, Y, density, colors='white', alpha=0.4, levels=10, linewidths=0.5); levels_grad = np.percentile(gradient_mag[gradient_mag > 1e-6], [75, 90, 98]) if np.any(gradient_mag > 1e-6) else 5; plt.contour(X, Y, gradient_mag, colors='red', alpha=0.6, levels=levels_grad, linewidths=1.0)
    plt.colorbar(label='Log10(Recrossing Time)'); plt.xlabel("Initial Phase φy / (2π)", fontsize=12); plt.ylabel("Initial Phase φz / (2π)", fontsize=12); plt.title(f"Detailed Structure in Region\nE={energy:.3f}, γ={gamma_} ({n_region} points)", fontsize=14); plt.grid(True, linestyle=':', alpha=0.4); plt.xlim(x_min, x_max); plt.ylim(y_min, y_max); plt.gca().set_aspect('equal')
    filename = f"region_detailed_analysis_E{energy:.3f}_gamma{gamma_}.pdf"; filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close()
    print(f"  Detailed region analysis plot saved to '{filepath}'")


def plot_time_slices(phi_y, phi_z, recross_times, n_slices, config, plot_folder_):
    """Visualizes phase distribution across slices of recrossing time."""
    if phi_y is None or n_slices <= 0: return

    log_times = np.log10(recross_times)
    n_recrossed = len(recross_times)
    energy = config['E']; gamma_ = config['GAMMA']

    print(f"\nGenerating time slice plots ({n_slices} slices)...")
    try:
        # Use quantiles for slice edges
        slice_edges = np.percentile(log_times, np.linspace(0, 100, n_slices + 1))
        # Ensure unique edges, especially if many times are identical
        slice_edges = np.unique(slice_edges)
        actual_n_slices = len(slice_edges) - 1
        if actual_n_slices < 1:
             print("  Warning: Could not create unique time slices. Skipping plot.")
             return

        ncols = 3 # Adjust layout
        nrows = (actual_n_slices + ncols - 1) // ncols
        fig_w = 18; fig_h = max(6, nrows * 5)

        fig, axs = plt.subplots(nrows, ncols, figsize=(fig_w, fig_h), sharex=True, sharey=True)
        axs = axs.ravel()

        for i in range(actual_n_slices):
            # Handle edge cases for the last bin
            if i < actual_n_slices - 1:
                mask = (log_times >= slice_edges[i]) & (log_times < slice_edges[i+1])
            else:
                mask = (log_times >= slice_edges[i]) & (log_times <= slice_edges[i+1]) # Include max value

            n_slice_pts = np.sum(mask)

            ax = axs[i]
            if n_slice_pts > 0:
                # Use a consistent color, or color by another variable if desired
                ax.scatter(phi_y[mask], phi_z[mask], c='darkblue', s=15, alpha=0.7)
            title = (f'log10(T) ~ [{slice_edges[i]:.2f}, {slice_edges[i+1]:.2f}]\n'
                     f'({n_slice_pts} pts)')
            ax.set_title(title, fontsize=10)
            ax.set_xlim(0, 1); ax.set_ylim(0, 1); ax.grid(True, ls=':', alpha=0.5); ax.set_aspect('equal')
            if i // ncols == nrows - 1 or i >= actual_n_slices - ncols : # Bottom row
                ax.set_xlabel('φy / (2π)', fontsize=10)
            if i % ncols == 0: # Leftmost column
                ax.set_ylabel('φz / (2π)', fontsize=10)
            ax.tick_params(axis='both', which='major', labelsize=9)

        # Hide unused subplots
        for j in range(actual_n_slices, len(axs)):
            axs[j].set_visible(False)

        plt.suptitle("Phase Distribution across Recrossing Time Slices (Quantiles)", fontsize=16)
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        filename = f"nhim_time_slices_quantile_E{energy:.3f}_gamma{gamma_}.pdf"
        filepath = os.path.join(plot_folder_, filename)
        plt.savefig(filepath); plt.close(fig)
        print(f"  Time slice plots (Quantiles) saved to '{filepath}'")
    except Exception as e:
         print(f"  Error during Time Slice plots: {e}")


def run_advanced_analysis(phi_y, phi_z, recross_times, config, plot_folder_, n_time_slices_):
    """Runs optional advanced analysis methods (t-SNE, Clustering, Time Slices)."""
    n_recrossed = len(recross_times)
    if n_recrossed < 50: # Reduced threshold slightly
        print("\nSkipping advanced analysis (requires >50 recrossing points).")
        return
    if not SKLEARN_AVAILABLE:
         print("\nSkipping advanced analysis (scikit-learn not available).")
         # Still run time slices if sklearn is not available
         plot_time_slices(phi_y, phi_z, recross_times, n_time_slices_, config, plot_folder_)
         return

    print("\n--- Running Advanced Structure Analysis ---")
    energy = config['E']; gamma_ = config['GAMMA']
    log_times = np.log10(recross_times)
    features = np.column_stack([phi_y, phi_z, log_times])

    # 1. t-SNE Visualization
    try:
        print("  Performing t-SNE analysis...")
        perplexity_val = min(30, max(5, n_recrossed / 3 -1)) # Ensure 5 <= perplexity < n_samples/3
        tsne = TSNE(n_components=2, perplexity=perplexity_val, learning_rate='auto', init='pca', random_state=42, n_iter=500)
        embedding = tsne.fit_transform(features)
        plt.figure(figsize=(10, 8))
        scatter = plt.scatter(embedding[:, 0], embedding[:, 1], c=log_times, cmap='cividis', s=30, alpha=0.8, edgecolors='w', linewidths=0.2)
        plt.colorbar(scatter, label='Log10(Recrossing Time)'); plt.title('t-SNE Visualization of NHIM Recrossing Dynamics'); plt.xlabel("t-SNE Component 1"); plt.ylabel("t-SNE Component 2"); plt.grid(True, linestyle=':', alpha=0.5)
        filename = f"nhim_tsne_E{energy:.3f}_gamma{gamma_}.pdf"; filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close()
        print(f"  t-SNE plot saved to '{filepath}'")
    except Exception as e: print(f"  Error during t-SNE: {e}")

    # 2. Clustering Analysis (K-Means example)
    try:
        print("  Performing K-Means clustering...")
        n_clusters = 5 # Adjust as needed
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        clusters = kmeans.fit_predict(features)
        plt.figure(figsize=(10, 8))
        scatter = plt.scatter(phi_y, phi_z, c=clusters, cmap='tab10', s=30, alpha=0.8, edgecolors='w', linewidths=0.2)
        plt.colorbar(scatter, label='Cluster ID'); plt.xlabel('Initial Phase φy / (2π)'); plt.ylabel('Initial Phase φz / (2π)'); plt.title(f'K-Means Clusters (k={n_clusters}) based on Phase and Recrossing Time'); plt.grid(True, linestyle=':', alpha=0.6); plt.xlim(0, 1); plt.ylim(0, 1); plt.gca().set_aspect('equal')
        filename = f"nhim_kmeans_clusters_E{energy:.3f}_gamma{gamma_}.pdf"; filepath = os.path.join(plot_folder_, filename); plt.savefig(filepath); plt.close()
        print(f"  K-Means clustering plot saved to '{filepath}'")
        for i in range(n_clusters):
            mask = (clusters == i); n_pts_cluster = np.sum(mask)
            if n_pts_cluster > 0: print(f"    Cluster {i} ({n_pts_cluster} pts): Mean log10(T)={np.mean(log_times[mask]):.2f}")
    except Exception as e: print(f"  Error during K-Means: {e}")

    # 3. Time Slice Visualization (Now called from here)
    plot_time_slices(phi_y, phi_z, recross_times, n_time_slices_, config, plot_folder_)


# ==============================================================================
# Main Execution Block
# ==============================================================================

def main():
    """Loads simulation data and performs NHIM distribution analysis."""
    start_time = time.time()
    os.makedirs(PLOT_FOLDER, exist_ok=True)

    # 1. Load Data
    rec_times, init_params_rec, t_max_sim, config = load_simulation_data(INPUT_FILEPATH)
    if rec_times is None: return

    # 2. Extract Recrossing Data
    print("\nExtracting recrossing trajectory data...")
    phi_y_rec, phi_z_rec, times_rec_only, n_recrossed = extract_recrossing_data(
        rec_times, init_params_rec, t_max_sim
    )
    if phi_y_rec is None: print("No recrossing data to analyze."); return

    # 3. Basic Phase Distribution Plots
    plot_phase_distribution(
        phi_y_rec, phi_z_rec, times_rec_only, config, PLOT_FOLDER,
        focus_reg=FOCUS_REGION, region_py=REGION_PHI_Y, region_pz=REGION_PHI_Z, margin=REGION_MARGIN
    )

    # 6. Optional Advanced Analysis (includes time slices)
    if ADVANCED_ANALYSIS:
        run_advanced_analysis(phi_y_rec, phi_z_rec, times_rec_only, config, PLOT_FOLDER, N_TIME_SLICES)
    elif N_TIME_SLICES > 0: # Run time slices even if sklearn is not available
         print("\nGenerating time slice plots (advanced analysis disabled)...")
         plot_time_slices(phi_y_rec, phi_z_rec, times_rec_only, N_TIME_SLICES, config, PLOT_FOLDER)

    # 4. Zoomed Phase Distribution Plot
    region_mask = visualize_phase_distribution_with_zoom(
        phi_y_rec, phi_z_rec, times_rec_only, config, PLOT_FOLDER,
        focus_reg=FOCUS_REGION, region_py=REGION_PHI_Y, region_pz=REGION_PHI_Z, margin=REGION_MARGIN
    )

    # 5. Detailed Analysis of Focused Region
    if FOCUS_REGION and region_mask is not None and np.sum(region_mask) > 0:
        analyze_region_in_detail(
            phi_y_rec[region_mask], phi_z_rec[region_mask], times_rec_only[region_mask],
            config, PLOT_FOLDER
        )


    print(f"\nNHIM distribution analysis finished in {time.time() - start_time:.2f} seconds.")

if __name__ == "__main__":
    main()